generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./igomon.db"
}

model Problem {
  id            Int       @id @default(autoincrement())
  sgfFilePath   String    @map("sgf_file_path")
  description   String
  turn          String
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  deadline      DateTime?
  answers       Answer[]

  @@map("problems")
}

model User {
  id              Int       @id @default(autoincrement())
  uuid            String    @unique
  xUserId         String?   @unique @map("x_user_id") // 後方互換性のため残す
  xAccessToken    String?   @map("x_access_token") // 後方互換性のため残す
  xRefreshToken   String?   @map("x_refresh_token") // 後方互換性のため残す
  xTokenExpiresAt DateTime? @map("x_token_expires_at") // 後方互換性のため残す
  isBanned        Boolean   @default(false) @map("is_banned")
  bannedReason    String?   @map("banned_reason")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  
  profile         UserProfile?
  authProviders   AuthProvider[]
  yosemonAnswers  YosemonUserAnswer[]

  @@map("users")
}

model Answer {
  id         Int      @id @default(autoincrement())
  problemId  Int      @map("problem_id")
  userUuid   String   @map("user_uuid")
  coordinate String
  reason     String
  playerName String   @map("player_name")
  playerRank String   @map("player_rank")
  isDeleted  Boolean  @default(false) @map("is_deleted")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  problem    Problem  @relation(fields: [problemId], references: [id])

  @@index([problemId])
  @@index([userUuid])
  @@index([coordinate])
  @@index([isDeleted])
  @@map("answers")
}

model UserProfile {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique @map("user_id")
  name      String
  rank      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  user      User     @relation(fields: [userId], references: [id])

  @@map("user_profiles")
}

model AuthProvider {
  id                 Int       @id @default(autoincrement())
  userId             Int       @map("user_id")
  provider           String    // "x" or "google"
  providerUserId     String    @map("provider_user_id")
  accessToken        String?   @map("access_token")
  refreshToken       String?   @map("refresh_token")
  tokenExpiresAt     DateTime? @map("token_expires_at")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")
  
  user               User      @relation(fields: [userId], references: [id])
  
  @@unique([provider, providerUserId])
  @@index([userId])
  @@map("auth_providers")
}

// よせもん問題テーブル
model YosemonProblem {
  id            Int                 @id @default(autoincrement())
  problemNumber Int                 @unique @map("problem_number") // ディレクトリ名に対応
  moves         Int?                // 表示する手数（nullの場合は最終手まで）
  createdAt     DateTime            @default(now()) @map("created_at")
  updatedAt     DateTime            @updatedAt @map("updated_at")
  
  answers       YosemonAnswer[]     // 正解の選択肢情報
  userAnswers   YosemonUserAnswer[] // ユーザーの回答履歴

  @@map("yosemon_problems")
}

// よせもん問題の正解選択肢テーブル
model YosemonAnswer {
  id          Int            @id @default(autoincrement())
  problemId   Int            @map("problem_id")
  coordinate  String         // 座標（例: "L11"）
  point       Int            // 目数
  orderIndex  Int            @map("order_index") // 正解順序（0が最も価値が高い）
  
  problem     YosemonProblem @relation(fields: [problemId], references: [id])

  @@unique([problemId, orderIndex])
  @@index([problemId])
  @@map("yosemon_answers")
}

// よせもんユーザー回答テーブル
model YosemonUserAnswer {
  id            Int            @id @default(autoincrement())
  problemId     Int            @map("problem_id")
  userId        Int            @map("user_id")
  userAnswer    String         @map("user_answer") // ユーザーの回答順序（例: "A,C,B,D"）
  isCorrect     Boolean        @map("is_correct")
  createdAt     DateTime       @default(now()) @map("created_at")
  
  problem       YosemonProblem @relation(fields: [problemId], references: [id])
  user          User           @relation(fields: [userId], references: [id])

  @@index([problemId])
  @@index([userId])
  @@index([problemId, userId])
  @@map("yosemon_user_answers")
}
